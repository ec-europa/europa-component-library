diff --git a/node_modules/@storybook/addon-cssresources/dist/esm/css-resource-panel.js b/node_modules/@storybook/addon-cssresources/dist/esm/css-resource-panel.js
index 53869b8..7ebd964 100644
--- a/node_modules/@storybook/addon-cssresources/dist/esm/css-resource-panel.js
+++ b/node_modules/@storybook/addon-cssresources/dist/esm/css-resource-panel.js
@@ -1,42 +1,15 @@
-function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
-
-import "core-js/modules/es.array.filter.js";
-import "core-js/modules/es.array.map.js";
-import "core-js/modules/es.array.reduce.js";
-import "core-js/modules/es.object.assign.js";
-import "core-js/modules/es.object.get-prototype-of.js";
-
-function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
-
-function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
-
-function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
-
-function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }
-
-function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
-
-function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
-
-function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }
-
-function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
-
-function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
-
-function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
-
 import React, { Component } from 'react';
 import { SyntaxHighlighter, Placeholder, Spaced, Icons } from '@storybook/components';
 import { STORY_RENDERED } from '@storybook/core-events';
 import { styled } from '@storybook/theming';
 import { EVENTS, PARAM_KEY } from './constants';
-var maxLimitToUseSyntaxHighlighter = 100000;
-var PlainCode = styled.pre({
+
+const maxLimitToUseSyntaxHighlighter = 100000;
+const PlainCode = styled.pre({
   textAlign: 'left',
   fontWeight: 'normal'
 });
-var Warning = styled.div({
+const Warning = styled.div({
   display: 'flex',
   padding: '10px',
   justifyContent: 'center',
@@ -49,130 +22,104 @@ var Warning = styled.div({
     height: 24
   }
 });
-export var CssResourcePanel = /*#__PURE__*/function (_Component) {
-  _inherits(CssResourcePanel, _Component);
-
-  var _super = _createSuper(CssResourcePanel);
-
-  function CssResourcePanel(props) {
-    var _this;
-
-    _classCallCheck(this, CssResourcePanel);
-
-    _this = _super.call(this, props);
-
-    _this.onStoryChange = function (id) {
-      var _this$state = _this.state,
-          currentList = _this$state.list,
-          currentStoryId = _this$state.currentStoryId;
-      var api = _this.props.api;
-      var list = api.getCurrentParameter(PARAM_KEY);
 
-      if (list && currentStoryId !== id) {
-        var existingIds = currentList.reduce(function (lookup, res) {
-          // eslint-disable-next-line no-param-reassign
-          lookup[res.id] = res;
-          return lookup;
-        }, {});
-        var mergedList = list.map(function (res) {
-          var existingItem = existingIds[res.id];
-          return existingItem ? Object.assign({}, res, {
-            picked: existingItem.picked
-          }) : res;
-        });
-        var picked = mergedList.filter(function (res) {
-          return res.picked;
-        });
-
-        _this.setState({
-          list: mergedList,
-          currentStoryId: id
-        }, function () {
-          return _this.emit(picked);
-        });
-      }
-    };
-
-    _this.onChange = function (event) {
-      var oldList = _this.state.list;
-      var list = oldList.map(function (i) {
-        return Object.assign({}, i, {
-          picked: i.id === event.target.id ? event.target.checked : i.picked
-        });
-      });
-
-      _this.setState({
-        list: list
-      }, function () {
-        return _this.emit(list.filter(function (res) {
-          return res.picked;
-        }));
-      });
-    };
-
-    _this.state = {
+export class CssResourcePanel extends Component {
+  constructor(props) {
+    super(props);
+    this.state = {
       currentStoryId: '',
       list: []
     };
-    return _this;
   }
 
-  _createClass(CssResourcePanel, [{
-    key: "componentDidMount",
-    value: function componentDidMount() {
-      var api = this.props.api;
-      api.on(STORY_RENDERED, this.onStoryChange);
-    }
-  }, {
-    key: "componentWillUnmount",
-    value: function componentWillUnmount() {
-      var api = this.props.api;
-      api.off(STORY_RENDERED, this.onStoryChange);
-    }
-  }, {
-    key: "emit",
-    value: function emit(list) {
-      var api = this.props.api;
-      api.emit(EVENTS.SET, list);
-    }
-  }, {
-    key: "render",
-    value: function render() {
-      var _this2 = this;
-
-      var list = this.state.list;
-      var active = this.props.active;
+  componentDidMount() {
+    const { api } = this.props;
+    api.on(STORY_RENDERED, this.onStoryChange);
+    this.initializeResources();
+  }
 
-      if (!active) {
-        return null;
-      }
+  componentWillUnmount() {
+    const { api } = this.props;
+    api.off(STORY_RENDERED, this.onStoryChange);
+  }
 
-      return /*#__PURE__*/React.createElement("div", null, list && list.map(function (_ref) {
-        var id = _ref.id,
-            code = _ref.code,
-            picked = _ref.picked,
-            _ref$hideCode = _ref.hideCode,
-            hideCode = _ref$hideCode === void 0 ? false : _ref$hideCode;
-        return /*#__PURE__*/React.createElement("div", {
-          key: id,
-          style: {
-            padding: 10
-          }
-        }, /*#__PURE__*/React.createElement("label", null, /*#__PURE__*/React.createElement("input", {
-          type: "checkbox",
-          checked: picked,
-          onChange: _this2.onChange,
-          id: id
-        }), /*#__PURE__*/React.createElement("span", null, "#", id)), code && !hideCode && code.length < maxLimitToUseSyntaxHighlighter && /*#__PURE__*/React.createElement(SyntaxHighlighter, {
-          language: "html"
-        }, code), code && !hideCode && code.length >= maxLimitToUseSyntaxHighlighter && /*#__PURE__*/React.createElement(Placeholder, null, /*#__PURE__*/React.createElement(Spaced, {
-          row: 1
-        }, /*#__PURE__*/React.createElement(PlainCode, null, code.substring(0, maxLimitToUseSyntaxHighlighter), " ..."), /*#__PURE__*/React.createElement(Warning, null, /*#__PURE__*/React.createElement(Icons, {
-          icon: "alert"
-        }), "Rest of the content cannot be displayed"))));
-      }));
+  initializeResources = () => {
+    const { api } = this.props;
+    const list = api.getCurrentParameter(PARAM_KEY) || [];
+    this.setState({ list }, () => this.emit(list.filter(res => res.picked)));
+  };
+
+  onStoryChange = (id) => {
+    const { list, currentStoryId } = this.state;
+    const { api } = this.props;
+    const newList = api.getCurrentParameter(PARAM_KEY);
+
+    if (newList && currentStoryId !== id) {
+      const existingIds = list.reduce((lookup, res) => {
+        lookup[res.id] = res;
+        return lookup;
+      }, {});
+      const mergedList = newList.map(res => {
+        const existingItem = existingIds[res.id];
+        return existingItem ? { ...res, picked: existingItem.picked } : res;
+      });
+      const picked = mergedList.filter(res => res.picked);
+      this.setState({ list: mergedList, currentStoryId: id }, () => this.emit(picked));
     }
-  }]);
-
-  return CssResourcePanel;
-}(Component);
\ No newline at end of file
+  };
+
+  onChange = (event) => {
+    const { list } = this.state;
+    const newList = list.map(i => ({
+      ...i,
+      picked: i.id === event.target.id ? event.target.checked : i.picked
+    }));
+    this.setState({ list: newList }, () => this.emit(newList.filter(res => res.picked)));
+  };
+
+  emit = (list) => {
+    const { api } = this.props;
+    api.emit(EVENTS.SET, list);
+  };
+
+  render() {
+    const { list } = this.state;
+    const { active = true } = this.props;
+
+    if (!active) return null;
+
+    return (
+      <div>
+        {list && list.map(({ id, code, picked, hideCode = false }) => (
+          <div key={id} style={{ padding: 10 }}>
+            <label>
+              <input
+                type="checkbox"
+                checked={picked}
+                onChange={this.onChange}
+                id={id}
+              />
+              <span>#{id}</span>
+            </label>
+            {code && !hideCode && code.length < maxLimitToUseSyntaxHighlighter && (
+              <SyntaxHighlighter language="html">
+                {code}
+              </SyntaxHighlighter>
+            )}
+            {code && !hideCode && code.length >= maxLimitToUseSyntaxHighlighter && (
+              <Placeholder>
+                <Spaced row={1}>
+                  <PlainCode>{code.substring(0, maxLimitToUseSyntaxHighlighter)} ...</PlainCode>
+                  <Warning>
+                    <Icons icon="alert" />
+                    Rest of the content cannot be displayed
+                  </Warning>
+                </Spaced>
+              </Placeholder>
+            )}
+          </div>
+        ))}
+      </div>
+    );
+  }
+}
diff --git a/node_modules/@storybook/addon-cssresources/dist/esm/index.js b/node_modules/@storybook/addon-cssresources/dist/esm/index.js
index 6811b2b..b7f5e42 100644
--- a/node_modules/@storybook/addon-cssresources/dist/esm/index.js
+++ b/node_modules/@storybook/addon-cssresources/dist/esm/index.js
@@ -4,10 +4,12 @@ import "core-js/modules/es.array.for-each.js";
 import "core-js/modules/es.regexp.exec.js";
 import "core-js/modules/es.string.replace.js";
 import "core-js/modules/web.dom-collections.for-each.js";
-import { document } from 'global';
-import { addons, makeDecorator } from '@storybook/addons';
+import { global } from 'global';
+import { addons, makeDecorator } from '@storybook/preview-api';
 import { EVENTS, PARAM_KEY } from './constants';
 
+const { document } = global;
+
 var changeMediaAttribute = function changeMediaAttribute(element, enabled) {
   var current = element.getAttribute('media');
 
@@ -96,7 +98,7 @@ export var withCssResources = makeDecorator({
         parameters = _ref.parameters;
     var storyOptions = parameters || options;
     addons.getChannel().on(EVENTS.SET, setResources);
-
+    addons.getChannel().emit('expand-panel');
     if (!Array.isArray(storyOptions) && !Array.isArray(storyOptions.cssresources)) {
       throw new Error('The `cssresources` parameter needs to be an Array');
     }
diff --git a/node_modules/@storybook/addon-cssresources/dist/esm/register.js b/node_modules/@storybook/addon-cssresources/dist/esm/register.js
index 974ccc8..be7d0f0 100644
--- a/node_modules/@storybook/addon-cssresources/dist/esm/register.js
+++ b/node_modules/@storybook/addon-cssresources/dist/esm/register.js
@@ -1,5 +1,5 @@
 import * as React from 'react';
-import { addons, types } from '@storybook/addons';
+import { addons, types } from '@storybook/manager-api';
 import { ADDON_ID, PANEL_ID, PARAM_KEY } from './constants';
 import { CssResourcePanel } from './css-resource-panel';
 addons.register(ADDON_ID, function (api) {
