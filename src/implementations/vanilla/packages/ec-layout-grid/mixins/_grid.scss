@use "sass:map";
@use "sass:math";
@use "@ecl/ec-base/mixins/breakpoints";
@use "@ecl/theme-dev/maps/layout";

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin ecl-make-container($gutters: layout.$ecl-grid-gutter-width) {
  box-sizing: border-box;
  margin-left: auto;
  margin-right: auto;
  position: relative;
  width: 100%;

  @each $breakpoint in map.keys($gutters) {
    @include breakpoints.ecl-media-breakpoint-up($breakpoint) {
      $gutter: map.get($gutters, $breakpoint);

      padding-left: ($gutter / 2);
      padding-right: ($gutter / 2);
    }
  }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin ecl-make-container-max-widths(
  $max-widths: layout.$ecl-container,
  $breakpoints: layout.$ecl-breakpoint
) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include breakpoints.ecl-media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: 100%;
      width: $container-max-width;
    }
  }
}

@mixin ecl-make-gutters($gutters: layout.$ecl-grid-gutter-width) {
  @each $breakpoint in map.keys($gutters) {
    @include breakpoints.ecl-media-breakpoint-up($breakpoint) {
      $gutter: map.get($gutters, $breakpoint);

      padding-left: ($gutter / 2);
      padding-right: ($gutter / 2);
    }
  }
}

@mixin ecl-make-row($gutters: layout.$ecl-grid-gutter-width) {
  box-sizing: border-box;
  display: flex;
  flex-wrap: wrap;

  @each $breakpoint in map.keys($gutters) {
    @include breakpoints.ecl-media-breakpoint-up($breakpoint) {
      $gutter: map.get($gutters, $breakpoint);

      margin-left: ($gutter / -2);
      margin-right: ($gutter / -2);
    }
  }
}

@mixin ecl-make-col-ready($gutters: layout.$ecl-grid-gutter-width) {
  box-sizing: border-box;
  min-height: 1px; // Prevent collapsing
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;

  @each $breakpoint in map.keys($gutters) {
    @include breakpoints.ecl-media-breakpoint-up($breakpoint) {
      $gutter: map.get($gutters, $breakpoint);

      padding-left: ($gutter / 2);
      padding-right: ($gutter / 2);
    }
  }
}

@mixin ecl-make-col($size, $columns: map.get($ecl-grid, 'columns')) {
  flex: 0 0 math.percentage($size / $columns);
  // width: percentage($size / $columns);
  // Add a `max-width` to make sure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: math.percentage($size / $columns);
}

@mixin ecl-make-col-offset($size, $columns: map.get($ecl-grid, 'columns')) {
  margin-left: math.percentage($size / $columns);
}

@mixin ecl-make-col-push($size, $columns: map.get($ecl-grid, 'columns')) {
  left: if($size > 0, math.percentage($size / $columns), auto);
}

@mixin ecl-make-col-pull($size, $columns: map.get($ecl-grid, 'columns')) {
  right: if($size > 0, math.percentage($size / $columns), auto);
}

@mixin ecl-make-col-modifier($type, $size, $columns) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include ecl-make-col-push($size, $columns);
  } @else if $type == pull {
    @include ecl-make-col-pull($size, $columns);
  } @else if $type == offset {
    @include ecl-make-col-offset($size, $columns);
  }
}
