{% spaceless %}

{#
  Parameters:
    - "icon" (associative array) (default: predefined structure): format:
        {
          path: '/static/media/icons.cbfd6efe.svg',
          type: '',
          name: '',
          size: 'm' (available options: 'xs','s','m','l','xl','2xl','fluid'),
          transform: 'rotate-0' (available options: 'rotate-0', 'rotate-90', 'rotate-180', 'rotate-270', 'flip-horizontal', 'flip-vertical'),
          color: 'default' (available options: 'default', 'inverted', 'primary')
        }
    - "as_image": false,
    - "extra_accessibility" : {
        description: '' (desc tag)
        description_id: '' (desc tag id)
        title: '' (title tag)
        title_id: '' (title tag id)
        role: 'image' (role attribute)
    }
    - "extra_classes" (string) (default: '')
    - "extra_attributes" (array) (default: []): format: [
        {
          "name" (string) (default: ''),
          "value" (optional) (string)
        ...
      ],
#}

{# Internal properties #}

{% set _as_image = as_image|default(false) %}
{% set _aria_hidden = 'true' %}

{% set _icon = {
  path: '',
  type: '',
  name: '',
  size: 'm',
  transform: '',
  color: '',
}|merge(icon|default({})) %}

{% set _extra_accessibility = {
  description: '',
  description_id: '',
  title: '',
  title_id: '',
  role: 'img',
}|merge(extra_accessibility|default({})) %}

{% set _css_class = 'ecl-icon' %}
{% set _extra_attributes = '' %}

{# Internal logic - Process properties #}

{% if _as_image %}
  {% set _aria_hidden = 'false' %}
{% endif %}

{% for property in ['size', 'transform', 'color'] %}
  {% if _icon[property] is defined and _icon[property] is not empty %}
    {% set _css_class = _css_class ~ ' ecl-icon--' ~ _icon[property] %}
  {% endif %}
{% endfor %}

{% set _icon_type = '' %}
{% if _icon.type is not empty %}
  {% set _icon_type = _icon.type ~ '--' %}
{% endif %}

{% if extra_classes is defined and extra_classes is not empty %}
  {% set _css_class = _css_class ~ ' ' ~ extra_classes %}
{% endif %}

{% if extra_accessibility is defined and extra_accessibility is not empty %}
  {% set extra_attributes = extra_attributes|default([])|merge([
    { name: 'role', value: _extra_accessibility.role },
    { name: 'aria-labelledby', value: _extra_accessibility.title_id ~ ' ' ~ _extra_accessibility.description_id },
  ]) %}
{% endif %}

{% if extra_attributes is defined and extra_attributes is not empty and extra_attributes is iterable %}
  {% for attr in extra_attributes %}
    {% if attr.value is defined %}
      {% set _extra_attributes = _extra_attributes ~ ' ' ~ attr.name ~ '="' ~ attr.value|e('html_attr') ~ '"' %}
    {% else %}
      {% set _extra_attributes = _extra_attributes ~ ' ' ~ attr.name %}
    {% endif %}
  {% endfor %}
{% endif %}

{# Print the result #}

<svg
  class="{{ _css_class }}"
  focusable="false"
  aria-hidden="{{ _aria_hidden }}"
  {{ _extra_attributes }}>
{% if _extra_accessibility.title is not empty %}
  <title
  {% if _extra_accessibility.title_id is not empty %}
    id="{{ _extra_accessibility.title_id }}"
  {% endif %}
  >
    {{- _extra_accessibility.title -}}
  </title>
  {% endif %}
{% if _extra_accessibility.description is not empty %}
  <desc
  {% if _extra_accessibility.description_id is not empty %}
    id="{{ _extra_accessibility.description_id }}"
  {% endif %}
  >
    {{- _extra_accessibility.description -}}
  </desc>
{% endif %}
  <use xlink:href="{{ _icon.path }}#{{ _icon_type }}{{ _icon.name }}"></use>
</svg>

{% endspaceless %}
