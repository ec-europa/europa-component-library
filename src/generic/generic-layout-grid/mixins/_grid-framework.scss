// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$ecl-grid-columns`.

/* stylelint-disable max-nesting-depth */

@mixin ecl-make-grid-columns(
  $columns-list: $ecl-grid-columns,
  $gutters: $ecl-grid-gutter-widths,
  $breakpoints: $ecl-grid-breakpoints
) {
  // Common properties for all breakpoints
  %ecl-grid-column {
    @include ecl-make-gutters($gutters);

    box-sizing: border-box;
    min-height: 1px; // Prevent columns from collapsing when empty
    position: relative;
    width: 100%;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: ecl-breakpoint-infix($breakpoint, $breakpoints);
    $columns: map-get($columns-list, $breakpoint);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .ecl-col#{$infix}-#{$i} {
        @extend %ecl-grid-column;
      }
    }

    // Special treatment for "xs" breakpoint, allow it to scale
    @if ($infix == '') {
      @for $i from 1 through $columns {
        .ecl-col#{$infix}-#{$i} {
          @include ecl-make-col($i, $columns);
        }
      }

      @each $modifier in (pull, push) {
        @for $i from 0 through $columns {
          .ecl-#{$modifier}#{$infix}-#{$i} {
            @include ecl-make-col-modifier($modifier, $i, $columns);
          }
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not($infix == '' and $i == 0) {
          // Avoid emitting useless .offset-xs-0
          .ecl-offset#{$infix}-#{$i} {
            @include ecl-make-col-modifier(offset, $i, $columns);
          }
        }
      }
    } @else {
      /* stylelint-disable-next-line order/order */
      @include ecl-media-breakpoint-between(
        $breakpoint,
        $breakpoint,
        $breakpoints
      ) {
        @for $i from 1 through $columns {
          .ecl-col#{$infix}-#{$i} {
            @include ecl-make-col($i, $columns);
          }
        }

        @each $modifier in (pull, push) {
          @for $i from 0 through $columns {
            .ecl-#{$modifier}#{$infix}-#{$i} {
              @include ecl-make-col-modifier($modifier, $i, $columns);
            }
          }
        }

        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not($infix == '' and $i == 0) {
            // Avoid emitting useless .offset-xs-0
            .ecl-offset#{$infix}-#{$i} {
              @include ecl-make-col-modifier(offset, $i, $columns);
            }
          }
        }
      }
    }
  }
}
