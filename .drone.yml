branches:
  exclude: [ gh-pages ]

clone:
  git:
    image: plugins/git
    commands:
      - if  [ "${DRONE_BUILD_EVENT}" == "deployment" ] ; then
          echo "Skipping git init/clone :)";
        else
          git init;
          git remote add origin "${DRONE_REMOTE_URL}";
          git fetch --no-tags origin "${DRONE_COMMIT_REF}";
          if [ "${DRONE_BUILD_EVENT}" == "pull_request" ] || [ "${DRONE_BUILD_EVENT}" == "tag" ] ; then
            git checkout -qf FETCH_HEAD;
          else
            git reset --hard -q "${DRONE_COMMIT_SHA}";
          fi
        fi

matrix:
  TEST:
    - audit
    - conventions
    - examples
    - size
    - deploy-tag

pipeline:
  install:
    image: node:dubnium
    commands:
      - yarn install --frozen-lockfile
    when:
      event: [ push, pull_request, tag]

  audit:
    image: node:dubnium
    commands:
      - yarn audit
    when:
      event: [ push, pull_request, tag]
      matrix:
        TEST: audit

  conventions:
    image: node:dubnium
    commands:
      - yarn test:coding-conventions
    when:
      event: [ push, pull_request, tag]
      matrix:
        TEST: conventions

  examples:
    image: node:dubnium
    commands:
      - cd examples/webpack4 && yarn build --display=errors-only
      - cd ../webpack4-eu && yarn build --display=errors-only
    when:
      event: [ push, pull_request, tag]
      matrix:
        TEST: examples

  size:
    image: buildkite/puppeteer:latest
    commands:
      - yarn clean
      - yarn dist:presets
      - yarn size-limit
    when:
      event: [ push, pull_request, tag]
      matrix:
        TEST: size

  build-presets:
    image: node:dubnium
    commands:
      - yarn browserstats
      - yarn clean
      - yarn dist:presets
    when:
      event: [tag]
      matrix:
        TEST: deploy-tag

  deploy-presets-to-cdn:
    image: garland/aws-cli-docker
    secrets: [AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION]
    commands:
      - if [ -d "./dist" ] ; then
        cd ./dist/packages ;
        aws configure set default.s3.max_concurrent_requests 20 ;
        aws s3 cp --recursive --quiet . s3://inno-ecl/ecl/${DRONE_TAG}/ ;
        echo "Transfer complete" ;
        fi
    when:
      event: [tag]
      matrix:
        TEST: deploy-tag

# =======================================
# Build and Upload package ==============
# =======================================

  build-website:
    image: buildkite/puppeteer:latest
    commands:
      - export PUBLIC_URL="/component-library"
      - node scripts/sri.js
      - npm run dist:storybook
      - npm run dist:website
      - echo ${DRONE_TAG=${DRONE_COMMIT_BRANCH=rc}} > dist/website/.version
      - echo ${DRONE_COMMIT_SHA} > dist/website/.commit
    when:
      event: [tag]
      matrix:
        TEST: deploy-tag

  # Package release build
  package-release:
    image: alpine:3.10
    commands:
      - tar -czC dist/website -f ${DRONE_REPO_NAME}-${DRONE_TAG}.tar.gz .
      - cp dist/packages/${DRONE_REPO_NAME}-${DRONE_TAG}-sri.json .
    when:
      event: [tag]
      matrix:
        TEST: deploy-tag

  # Push release to Github
  push-github-release:
    image: plugins/github-release
    files:
      - ${DRONE_REPO_NAME}-${DRONE_TAG}.tar.gz
      - ${DRONE_REPO_NAME}-${DRONE_TAG}-sri.json
    checksum:
      - sha1
    secrets: [ GITHUB_RELEASE_API_KEY ]
    when:
      event: [tag]
      matrix:
        TEST: deploy-tag

  # Trigger deploy event on Github
  create-deploy-production:
    image: fpfis/drone-plugin-github-deploy
    state: create
    deploy_environment: production
    secrets: [ github_api_token ]
    automerge: false
    when:
      event: [tag]
      matrix:
        TEST: deploy-tag

# =======================================
# Deployment ============================
# =======================================

  # Download release from github and extract into build folder
  download-github-release:
    image: instrumentisto/rsync-ssh
    commands:
      - wget https://github.com/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/releases/download/${DRONE_TAG}/${DRONE_REPO_NAME}-${DRONE_TAG}.tar.gz
      - wget https://github.com/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/releases/download/${DRONE_TAG}/${DRONE_REPO_NAME}-${DRONE_TAG}-sri.json
      - wget https://github.com/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/releases/download/${DRONE_TAG}/sha1sum.txt
      - sha1sum -c sha1sum.txt
      - mkdir build
      - tar zxvf ${DRONE_REPO_NAME}-${DRONE_TAG}.tar.gz -C build
      - echo $(date +%s) > build/.timestamp
    when:
      event: deployment
      matrix:
        TEST: deploy-tag

  # Deploy build folder into production
  deploy-to-production:
    image: drillster/drone-rsync
    secrets: [ rsync_key , MGMT_IP ]
    hosts: [ $MGMT_IP ]
    user : fpfis
    source: ./build/
    target: /ec/local/home/fpfis/reference/php-clusters/multisite/production/cluster00/sources/static/europa-component-library/
    script:
        - export GIT_FPFIS_AUTHOR="Drone ec.deploy.fpfis.eu"
        - cd /ec/local/home/fpfis/reference/php-clusters/multisite/production/cluster00/sources/static/europa-component-library
        - git add -A .
        - git commit -m"Deployed ${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}@${DRONE_TAG} from drone build ${DRONE_BUILD_NUMBER}." .
        - git push 'nas-reference' 'master'
    when:
      event: deployment
      matrix:
        TEST: deploy-tag
