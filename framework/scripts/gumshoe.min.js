/*! gumshoe v3.5.0 | (c) 2017 Chris Ferdinandi | MIT License | http://github.com/cferdinandi/gumshoe */
!(function(e, t) {
  typeof define === 'function' && define.amd
    ? define([], t(e))
    : typeof exports === 'object'
      ? (module.exports = t(e))
      : (e.gumshoe = t(e));
})(typeof global !== 'undefined' ? global : this.window || this.global, e => {
  var t,
    n,
    o,
    r,
    a,
    c,
    i,
    l = {},
    s =
      'querySelector' in document &&
      'addEventListener' in e &&
      'classList' in document.createElement('_'),
    u = [],
    f = {
      selector: '[data-gumshoe] a',
      selectorHeader: '[data-gumshoe-header]',
      container: e,
      offset: 0,
      activeClass: 'active',
      scrollDelay: !1,
      callback() {},
    },
    d = function(e, t, n) {
      if (Object.prototype.toString.call(e) === '[object Object]')
        for (const o in e)
          Object.prototype.hasOwnProperty.call(e, o) && t.call(n, e[o], o, e);
      else for (let r = 0, a = e.length; r < a; r++) t.call(n, e[r], r, e);
    },
    v = function() {
      let e = {},
        t = !1,
        n = 0,
        o = arguments.length;
      Object.prototype.toString.call(arguments[0]) === '[object Boolean]' &&
        ((t = arguments[0]), n++);
      for (
        let r = function(n) {
          for (const o in n)
            Object.prototype.hasOwnProperty.call(n, o) &&
              (t && Object.prototype.toString.call(n[o]) === '[object Object]'
                ? (e[o] = v(!0, e[o], n[o]))
                : (e[o] = n[o]));
        };
        n < o;
        n++
      ) {
        const a = arguments[n];
        r(a);
      }
      return e;
    },
    m = function(e) {
      return Math.max(e.scrollHeight, e.offsetHeight, e.clientHeight);
    },
    g = function() {
      return Math.max(
        document.body.scrollHeight,
        document.documentElement.scrollHeight,
        document.body.offsetHeight,
        document.documentElement.offsetHeight,
        document.body.clientHeight,
        document.documentElement.clientHeight
      );
    },
    h = function(e) {
      let n = 0;
      if (e.offsetParent) {
        do (n += e.offsetTop), (e = e.offsetParent);
        while (e);
      } else n = e.offsetTop;
      return (n = n - a - t.offset), n >= 0 ? n : 0;
    },
    p = function(t) {
      const n = t.getBoundingClientRect();
      return (
        n.top >= 0 &&
        n.left >= 0 &&
        n.bottom <= (e.innerHeight || document.documentElement.clientHeight) &&
        n.right <= (e.innerWidth || document.documentElement.clientWidth)
      );
    },
    y = function() {
      u.sort(
        (e, t) =>
          e.distance > t.distance ? -1 : e.distance < t.distance ? 1 : 0
      );
    };
  l.setDistances = function() {
    (o = g()), (a = r ? m(r) + h(r) : 0), d(u, e => {
      e.distance = h(e.target);
    }), y();
  };
  let b = function() {
      const e = document.querySelectorAll(t.selector);
      d(e, e => {
        if (e.hash) {
          const t = document.querySelector(e.hash);
          t &&
            u.push({
              nav: e,
              target: t,
              parent:
                e.parentNode.tagName.toLowerCase() === 'li'
                  ? e.parentNode
                  : null,
              distance: 0,
            });
        }
      });
    },
    H = function() {
      c &&
        (
          c.nav.classList.remove(t.activeClass),
          c.parent && c.parent.classList.remove(t.activeClass)
        );
    },
    C = function(e) {
      H(), e.nav.classList.add(t.activeClass), e.parent &&
        e.parent.classList.add(t.activeClass), t.callback(e), (c = {
        nav: e.nav,
        parent: e.parent,
      });
    };
  l.getCurrentNav = function() {
    const n = e.pageYOffset;
    if (e.innerHeight + n >= o && p(u[0].target)) return C(u[0]), u[0];
    for (let r = 0, a = u.length; r < a; r++) {
      const c = u[r];
      if (c.distance <= n) return C(c), c;
    }
    H(), t.callback();
  };
  const L = function() {
    d(u, e => {
      e.nav.classList.contains(t.activeClass) &&
        (c = { nav: e.nav, parent: e.parent });
    });
  };
  l.destroy = function() {
    t &&
      (
        t.container.removeEventListener('resize', j, !1),
        t.container.removeEventListener('scroll', j, !1),
        (u = []),
        (t = null),
        (n = null),
        (o = null),
        (r = null),
        (a = null),
        (c = null),
        (i = null)
      );
  };
  var E = function(e) {
      window.clearTimeout(n), (n = setTimeout(() => {
        l.setDistances(), l.getCurrentNav();
      }, 66));
    },
    j = function(e) {
      n ||
        (n = setTimeout(() => {
          (n = null), e.type === 'scroll' && l.getCurrentNav(), e.type ===
            'resize' && (l.setDistances(), l.getCurrentNav());
        }, 66));
    };
  return (l.init = function(e) {
    s &&
      (
        l.destroy(),
        (t = v(f, e || {})),
        (r = document.querySelector(t.selectorHeader)),
        b(),
        u.length !== 0 &&
          (
            L(),
            l.setDistances(),
            l.getCurrentNav(),
            t.container.addEventListener('resize', j, !1),
            t.scrollDelay
              ? t.container.addEventListener('scroll', E, !1)
              : t.container.addEventListener('scroll', j, !1)
          )
      );
  }), l;
});
